{"version":3,"sources":["04_components/AddRowModal.jsx","04_components/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["AddRowModal","state","fio","coords","date","saveChanges","e","props","addRow","setState","prevState","closeDialog","onChangeFIO","val","target","value","onChangePlace","onChangeDate","dt","Modal","show","this","showDialog","onHide","Header","closeButton","Title","Body","className","htmlFor","type","id","aria-describedby","placeholder","onChange","placeholderText","selected","Footer","Button","variant","onClick","Component","Table","items","showModal","form","item","name","place","axios","post","then","res","getData","hideModal","get","console","log","data","getDate","toLocaleDateString","componentDidMount","scope","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c9e9d79.chunk.js","sourcesContent":["import React, {Component, useState} from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nclass AddRowModal extends Component {\r\n\r\n    state = {\r\n        fio: \"\",\r\n        coords: \"\",\r\n        date: \"\"\r\n    };\r\n\r\n    saveChanges = (e) => {\r\n        this.props.addRow(e, this.state);\r\n        this.setState(prevState => ({\r\n            fio: \"\",\r\n            coords: \"\",\r\n            date: \"\"\r\n        }));\r\n        this.props.closeDialog();\r\n    };\r\n\r\n    onChangeFIO = (e, val) => {\r\n        this.setState({fio: e.target.value});\r\n    };\r\n\r\n    onChangePlace = (e) => {\r\n        this.setState({coords: e.target.value});\r\n    };\r\n\r\n    onChangeDate = (dt) => {\r\n        this.setState({date: dt});\r\n    };\r\n\r\n    render() {\r\n\r\n        return <Modal show={this.props.showDialog} onHide={this.props.closeDialog}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Добавление строки</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"fio\">ФИО</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"fio\" aria-describedby=\"fioHelp\" placeholder=\"\" \r\n                                value={this.state.fio} onChange={this.onChangeFIO} />\r\n                                <small id=\"fioHelp\" className=\"form-text text-muted\">ФИО полностью</small>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"place\">Местоположение</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"place\" aria-describedby=\"placeHelp\" placeholder=\"\" \r\n                                value={this.state.coords} onChange={this.onChangePlace} />\r\n                                <small id=\"placeHelp\" className=\"form-text text-muted\">Координаты</small>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"date\">Дата</label>\r\n                                <br/>\r\n                                <DatePicker id=\"date\" placeholderText=\"Выберите дату\" selected={this.state.date} onChange={date => this.onChangeDate(date)} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.props.closeDialog}>Закрыть</Button>\r\n                <Button variant=\"primary\" onClick={this.saveChanges}>Сохранить</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    };\r\n\r\n}\r\n\r\nexport default AddRowModal;\r\n","import React, {Component} from \"react\";\r\nimport AddRowModal from \"./AddRowModal\";\r\nimport axios from \"axios\";\r\n\r\nclass Table extends Component {\r\n\r\n    state = {\r\n        items: [],\r\n        showModal: false\r\n    };\r\n\r\n    addRow = (e, form) => {\r\n        let item = {\r\n            name: form.fio,\r\n            place: form.coords,\r\n            date: form.date\r\n        };\r\n        this.setState({\r\n            items: [\r\n                ...this.state.items,\r\n                item\r\n            ]\r\n        });\r\n        axios.post(\"mark\", item).then(res => {\r\n            this.getData();\r\n        });\r\n    };\r\n\r\n    showModal = () => {\r\n        this.setState(({showModal}) => ({\r\n            showModal: true\r\n        }));\r\n    };\r\n\r\n    hideModal = () => {\r\n        this.setState(({showModal}) => ({\r\n            showModal: false\r\n        }));\r\n    };\r\n\r\n    getData = () => {\r\n        axios.get(\"mark\").then(res => {\r\n            console.log(res);\r\n            console.log(res.data);\r\n            console.log(res.data.data);\r\n            this.setState({\r\n                items: res.data.data\r\n            });\r\n        });\r\n    };\r\n\r\n    getDate = (dt) => {\r\n        return dt.toLocaleDateString();\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        this.getData();\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div>\r\n\r\n                <AddRowModal addRow={this.addRow} showDialog={this.state.showModal} closeDialog={this.hideModal} />\r\n\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <table className=\"table\">\r\n                                <thead className=\"thead-dark\">\r\n                                    <tr>\r\n                                    <th scope=\"col\">#</th>\r\n                                    <th scope=\"col\">ФИО</th>\r\n                                    <th scope=\"col\">Местоположение</th>\r\n                                    <th scope=\"col\">Дата</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {this.state.items.map(item => \r\n                                        <tr key={item.id}>\r\n                                            <td>{item.id}</td>\r\n                                            <td>{item.name}</td>\r\n                                            <td>{item.place}</td>\r\n                                            <td>{item.date}</td>\r\n                                        </tr>\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={this.showModal}>Добавить строку</button>\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={this.getData}>Get data</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n\r\n    };\r\n\r\n}\r\n\r\nexport default Table;","import React, {Component} from \"react\";\r\nimport Table from \"./04_components/Table\";\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n        return <Table />;\r\n    };\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}